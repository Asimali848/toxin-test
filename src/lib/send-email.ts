import type { UserInfo } from "./types";

export async function sendEmailWithPDF(
  email: string,
  pdfBlob: Blob,
  fileName: string,
  userInfo: UserInfo,
): Promise<boolean> {
  try {
    const formData = new FormData();
    formData.append("email", email);
    formData.append("subject", "Your Environmental Test Report");
    formData.append(
      "message",
      `
      Hello ${userInfo.name || "Client"},
      <br/><br/>
      Please find attached your Environmental Test Report.
      <br/><br/>
      Regards,<br/>Toxin Testers Team
    `,
    );
    formData.append("attachment", pdfBlob, fileName);

    // Example API route â€” replace with your actual backend or n8n webhook URL
    const response = await fetch("https://scintia.app.n8n.cloud/webhook/91439925-955d-4b27-ba3f-300aec964cf8", {
      method: "POST",
      body: formData,
    });

    return response.ok;
  } catch {
    return false;
  }
}

/**
 * Send the PDF to the webhook as a Markdown file attachment.
 * The markdown file will include the provided markdownPrefix and a data-uri link to the PDF.
 */
export async function sendPdfAsMarkdownAttachment(
  webhookUrl: string,
  userEmail: string,
  pdfBlob: Blob,
  fileName: string,
  markdownPrefix = "# Environmental Test Report",
): Promise<boolean> {
  try {
    // convert blob to base64 (chunked)
    const toBase64 = async (blob: Blob) => {
      const buffer = await blob.arrayBuffer();
      const bytes = new Uint8Array(buffer);
      const chunkSize = 0x8000;
      let binary = "";
      for (let i = 0; i < bytes.length; i += chunkSize) {
        const chunk = bytes.subarray(i, i + chunkSize);
        binary += String.fromCharCode.apply(null, Array.from(chunk) as any);
      }
      return btoa(binary);
    };

    const base64 = await toBase64(pdfBlob);

    // Build markdown content that links to the PDF as a data URI
    const safeFileName = fileName.replace(/[^a-z0-9_.-]/gi, "_");
    const mdContent = `${markdownPrefix}\n\n[Download Report: ${safeFileName}](data:application/pdf;base64,${base64})\n\n*Generated by Toxin Testers*`;

    const mdBlob = new Blob([mdContent], { type: "text/markdown" });
    const mdFileName = safeFileName.replace(/\.pdf$/i, ".md");

    const form = new FormData();
    form.append("email", userEmail);
    form.append("subject", `Environmental Test Report - ${safeFileName}`);
    form.append("markdown", mdContent);
    // Attach the markdown file as 'attachment'
    form.append("attachment", mdBlob, mdFileName);

    const res = await fetch(webhookUrl, {
      method: "POST",
      body: form,
    });

    return res.ok;
  } catch (_err) {
    return false;
  }
}

/**
 * Send an arbitrary file (PDF) to a webhook as multipart/form-data.
 * Additional fields can be provided via the `fields` object.
 */
export async function sendFileToWebhook(
  webhookUrl: string,
  fileBlob: Blob,
  fileName: string,
  fields?: Record<string, string>,
): Promise<boolean> {
  try {
    const form = new FormData();
    if (fields) {
      Object.entries(fields).forEach(([k, v]) => form.append(k, v));
    }
    form.append("file", fileBlob, fileName);

    const res = await fetch(webhookUrl, {
      method: "POST",
      body: form,
    });

    return res.ok;
  } catch (_err) {
    return false;
  }
}

/**
 * Send a file to the webhook inside a JSON payload (base64-encoded).
 * This is useful when the receiving webhook expects JSON instead of multipart.
 */
export async function sendFileAsJsonToWebhook(
  webhookUrl: string,
  fileBlob: Blob,
  fileName: string,
  email?: string,
  extraFields?: Record<string, string>,
): Promise<boolean> {
  try {
    // convert blob to base64
    const buffer = await fileBlob.arrayBuffer();
    const bytes = new Uint8Array(buffer);
    let binary = "";
    const chunkSize = 0x8000;
    for (let i = 0; i < bytes.length; i += chunkSize) {
      const chunk = bytes.subarray(i, i + chunkSize);
      binary += String.fromCharCode.apply(null, Array.from(chunk) as any);
    }
    const base64 = btoa(binary);

    const payload: Record<string, any> = {
      fileName,
      fileBase64: base64,
    };
    if (email) payload.email = email;
    if (extraFields) {
      Object.assign(payload, extraFields);
    }

    const res = await fetch(webhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    return res.ok;
  } catch (_err) {
    return false;
  }
}
